<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class QuestionSeeder extends Seeder
{
    public function run()
    {
        // Easy Questions (Basic SELECT, WHERE, ORDER BY)
        DB::table('questions')->insert([
            [
                'title' => 'List All Products',
                'description' => 'Write a query to select all products with their names and prices.',
                'instructions' => 'Use SELECT statement to retrieve name and price columns from the products table.',
                'expected_sql' => 'SELECT name, price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'name\', \'price\')->get();',
                'expected_result' => 'Returns product names and their corresponding prices.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'Start with SELECT and specify the column names you want.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Find Expensive Products',
                'description' => 'Find all products with price greater than $100.',
                'instructions' => 'Use WHERE clause to filter products based on price condition.',
                'expected_sql' => 'SELECT * FROM products WHERE price > 100;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'price\', \'>\', 100)->get();',
                'expected_result' => 'Returns all products with price greater than 100.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE clause with a comparison operator.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Sort Products by Price',
                'description' => 'Get all products ordered by price from highest to lowest.',
                'instructions' => 'Use ORDER BY clause to sort the results by price in descending order.',
                'expected_sql' => 'SELECT * FROM products ORDER BY price DESC;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'price\', \'desc\')->get();',
                'expected_result' => 'Returns all products sorted by price from highest to lowest.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY with DESC for descending order.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Count Total Products',
                'description' => 'Count how many products are in the database.',
                'instructions' => 'Use COUNT aggregate function to count all rows in the products table.',
                'expected_sql' => 'SELECT COUNT(*) as total_products FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'COUNT(*) as total_products\')->get();',
                'expected_result' => 'Returns a single row with the total count of products.',
                'difficulty' => 'easy',
                'category' => 'basic_aggregate',
                'points' => 5,
                'hint' => 'Use COUNT(*) to count all rows.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Find Products by Brand',
                'description' => 'Find all Apple products.',
                'instructions' => 'Use WHERE clause to filter products by specific brand name.',
                'expected_sql' => 'SELECT * FROM products WHERE brand = \'Apple\';',
                'expected_laravel' => 'DB::table(\'products\')->where(\'brand\', \'Apple\')->get();',
                'expected_result' => 'Returns all products where brand equals Apple.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with exact string match for brand.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Medium Questions (JOINs, GROUP BY, Subqueries)
        DB::table('questions')->insert([
            [
                'title' => 'Products with Categories',
                'description' => 'List all products with their category names.',
                'instructions' => 'Use JOIN to combine products and categories tables to show product and category names together.',
                'expected_sql' => 'SELECT p.name as product_name, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.id;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->select(\'p.name as product_name\', \'c.name as category_name\')->get();',
                'expected_result' => 'Returns product names paired with their corresponding category names.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'Use JOIN with ON clause to connect products.category_id = categories.id.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products per Category',
                'description' => 'Count how many products are in each category.',
                'instructions' => 'Use LEFT JOIN with GROUP BY and COUNT to show the number of products in each category, including categories with no products.',
                'expected_sql' => 'SELECT c.name, COUNT(p.id) as product_count FROM categories c LEFT JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->leftJoin(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'COUNT(p.id) as product_count\'))->groupBy(\'c.id\', \'c.name\')->get();',
                'expected_result' => 'Returns category names with the count of products in each category.',
                'difficulty' => 'medium',
                'category' => 'group_by',
                'points' => 15,
                'hint' => 'Use LEFT JOIN to include categories with zero products, then GROUP BY category.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Average Price by Category',
                'description' => 'Calculate the average price of products in each category.',
                'instructions' => 'Use JOIN with GROUP BY and AVG function to calculate average product price per category.',
                'expected_sql' => 'SELECT c.name, AVG(p.price) as avg_price FROM categories c JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'AVG(p.price) as avg_price\'))->groupBy(\'c.id\', \'c.name\')->get();',
                'expected_result' => 'Returns category names with their average product prices.',
                'difficulty' => 'medium',
                'category' => 'group_by_aggregate',
                'points' => 15,
                'hint' => 'Use AVG() function with GROUP BY to calculate average price per category.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Orders with Customer Info',
                'description' => 'Show order ID, customer name, and total amount for all orders.',
                'instructions' => 'Select specific columns from the orders table to display order information.',
                'expected_sql' => 'SELECT id, customer_name, total_amount FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'id\', \'customer_name\', \'total_amount\')->get();',
                'expected_result' => 'Returns order IDs, customer names, and total amounts for all orders.',
                'difficulty' => 'medium',
                'category' => 'basic_join',
                'points' => 10,
                'hint' => 'Select the id, customer_name, and total_amount columns from orders table.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products Above Average Price',
                'description' => 'Find products that cost more than the average product price.',
                'instructions' => 'Use a subquery to calculate the average price and filter products above that average.',
                'expected_sql' => 'SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);',
                'expected_laravel' => 'DB::table(\'products\')->where(\'price\', \'>\', function($query) { $query->selectRaw(\'AVG(price)\')->from(\'products\'); })->get();',
                'expected_result' => 'Returns all products with prices higher than the average product price.',
                'difficulty' => 'medium',
                'category' => 'subquery',
                'points' => 15,
                'hint' => 'Use a subquery with AVG() function in the WHERE clause.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Hard Questions (Complex JOINs, Window Functions, CTEs)
        DB::table('questions')->insert([
            [
                'title' => 'Complete Order Details',
                'description' => 'Show order ID, customer name, product name, quantity, and total for each order item.',
                'instructions' => 'Use multiple JOINs to connect orders, order_items, and products tables to show complete order details.',
                'expected_sql' => 'SELECT o.id as order_id, o.customer_name, p.name as product_name, oi.quantity, oi.total_price FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->select(\'o.id as order_id\', \'o.customer_name\', \'p.name as product_name\', \'oi.quantity\', \'oi.total_price\')->get();',
                'expected_result' => 'Returns detailed order information with customer names, product names, quantities, and prices for each order item.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Chain multiple JOINs: orders → order_items → products.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Top Selling Products',
                'description' => 'Find the top 3 products by total quantity sold.',
                'instructions' => 'Use JOIN, GROUP BY, SUM, ORDER BY, and LIMIT to find the products with highest total sales quantity.',
                'expected_sql' => 'SELECT p.name, SUM(oi.quantity) as total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id, p.name ORDER BY total_sold DESC LIMIT 3;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->select(\'p.name\', DB::raw(\'SUM(oi.quantity) as total_sold\'))->groupBy(\'p.id\', \'p.name\')->orderBy(\'total_sold\', \'desc\')->limit(3)->get();',
                'expected_result' => 'Returns the top 3 products by total quantity sold, showing product names and total quantities.',
                'difficulty' => 'hard',
                'category' => 'complex_aggregate',
                'points' => 25,
                'hint' => 'Use SUM(quantity), GROUP BY product, ORDER BY total DESC, and LIMIT 3.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Revenue Analysis',
                'description' => 'Calculate total revenue for each category from completed orders.',
                'instructions' => 'Use multiple JOINs with WHERE clause to filter only delivered orders, then GROUP BY category to calculate total revenue.',
                'expected_sql' => 'SELECT c.name as category, SUM(oi.total_price) as revenue FROM categories c JOIN products p ON c.id = p.category_id JOIN order_items oi ON p.id = oi.product_id JOIN orders o ON oi.order_id = o.id WHERE o.status = \'delivered\' GROUP BY c.id, c.name ORDER BY revenue DESC;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->join(\'orders as o\', \'oi.order_id\', \'=\', \'o.id\')->where(\'o.status\', \'delivered\')->select(\'c.name as category\', DB::raw(\'SUM(oi.total_price) as revenue\'))->groupBy(\'c.id\', \'c.name\')->orderBy(\'revenue\', \'desc\')->get();',
                'expected_result' => 'Returns total revenue per category for delivered orders only, sorted by revenue in descending order.',
                'difficulty' => 'hard',
                'category' => 'complex_joins_aggregate',
                'points' => 30,
                'hint' => 'Chain JOINs through all tables, filter by order status, then GROUP BY category.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customer Order Statistics',
                'description' => 'For each customer, show total orders, total spent, and average order value.',
                'instructions' => 'Use GROUP BY with multiple aggregate functions (COUNT, SUM, AVG) to calculate customer statistics.',
                'expected_sql' => 'SELECT customer_name, customer_email, COUNT(*) as total_orders, SUM(total_amount) as total_spent, AVG(total_amount) as avg_order_value FROM orders GROUP BY customer_name, customer_email ORDER BY total_spent DESC;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'customer_name\', \'customer_email\', DB::raw(\'COUNT(*) as total_orders\'), DB::raw(\'SUM(total_amount) as total_spent\'), DB::raw(\'AVG(total_amount) as avg_order_value\'))->groupBy(\'customer_name\', \'customer_email\')->orderBy(\'total_spent\', \'desc\')->get();',
                'expected_result' => 'Returns customer statistics including total orders, total amount spent, and average order value, sorted by total spent.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 25,
                'hint' => 'Use COUNT(*), SUM(total_amount), and AVG(total_amount) with GROUP BY customer.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products Never Ordered',
                'description' => 'Find products that have never been ordered.',
                'instructions' => 'Use LEFT JOIN with WHERE IS NULL to find products that do not appear in any orders.',
                'expected_sql' => 'SELECT p.* FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id WHERE oi.product_id IS NULL;',
                'expected_laravel' => 'DB::table(\'products as p\')->leftJoin(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->whereNull(\'oi.product_id\')->select(\'p.*\')->get();',
                'expected_result' => 'Returns all products that have never been included in any order.',
                'difficulty' => 'hard',
                'category' => 'advanced_joins',
                'points' => 20,
                'hint' => 'Use LEFT JOIN to include all products, then filter WHERE order_items.product_id IS NULL.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}