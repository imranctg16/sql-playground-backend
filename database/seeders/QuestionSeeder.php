<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class QuestionSeeder extends Seeder
{
    public function run()
    {
        // Clear existing questions
        DB::table('questions')->truncate();

        // BEGINNER LEVEL QUESTIONS

        // Category 1: Basic SELECT (Easy - 5 points each)
        DB::table('questions')->insert([
            [
                'title' => 'List All Products',
                'description' => 'Write a query to select all products with their names and prices.',
                'instructions' => 'Use SELECT statement to retrieve name and price columns from the products table.',
                'expected_sql' => 'SELECT name, price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'name\', \'price\')->get();',
                'expected_result' => 'Returns product names and their corresponding prices.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'Start with SELECT and specify the column names you want.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Show All Categories',
                'description' => 'Select all category names and descriptions.',
                'instructions' => 'Use SELECT to retrieve name and description columns from the categories table.',
                'expected_sql' => 'SELECT name, description FROM categories;',
                'expected_laravel' => 'DB::table(\'categories\')->select(\'name\', \'description\')->get();',
                'expected_result' => 'Returns category names and their descriptions.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'Use SELECT with specific column names from categories table.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Display Product Information',
                'description' => 'Show product name, price, and brand for all products.',
                'instructions' => 'Use SELECT to retrieve name, price, and brand columns from products table.',
                'expected_sql' => 'SELECT name, price, brand FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'name\', \'price\', \'brand\')->get();',
                'expected_result' => 'Returns product names, prices, and brands.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT three specific columns from the products table.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'List Customer Orders',
                'description' => 'Show customer name and email from all orders.',
                'instructions' => 'Use SELECT to retrieve customer_name and customer_email from orders table.',
                'expected_sql' => 'SELECT customer_name, customer_email FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'customer_name\', \'customer_email\')->get();',
                'expected_result' => 'Returns customer names and emails from orders.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT customer_name and customer_email columns from orders.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Product Stock Information',
                'description' => 'Display product name and stock quantity.',
                'instructions' => 'Use SELECT to show name and stock_quantity from products table.',
                'expected_sql' => 'SELECT name, stock_quantity FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'name\', \'stock_quantity\')->get();',
                'expected_result' => 'Returns product names and their stock quantities.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT name and stock_quantity from products table.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Order Basic Details',
                'description' => 'Show order ID, customer name, and order date.',
                'instructions' => 'Use SELECT to retrieve id, customer_name, and order_date from orders.',
                'expected_sql' => 'SELECT id, customer_name, order_date FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'id\', \'customer_name\', \'order_date\')->get();',
                'expected_result' => 'Returns order IDs, customer names, and order dates.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT id, customer_name, and order_date columns.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Hierarchy',
                'description' => 'List category name and parent_id for all categories.',
                'instructions' => 'Use SELECT to show name and parent_id from categories table.',
                'expected_sql' => 'SELECT name, parent_id FROM categories;',
                'expected_laravel' => 'DB::table(\'categories\')->select(\'name\', \'parent_id\')->get();',
                'expected_result' => 'Returns category names and their parent IDs.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT name and parent_id from categories.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Product Status Check',
                'description' => 'Show product name and is_active status.',
                'instructions' => 'Use SELECT to display name and is_active columns from products.',
                'expected_sql' => 'SELECT name, is_active FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'name\', \'is_active\')->get();',
                'expected_result' => 'Returns product names and their active status.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT name and is_active from products table.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Order Status Overview',
                'description' => 'Display order ID and status for all orders.',
                'instructions' => 'Use SELECT to show id and status columns from orders table.',
                'expected_sql' => 'SELECT id, status FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'id\', \'status\')->get();',
                'expected_result' => 'Returns order IDs and their current status.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'SELECT id and status from orders table.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Complete Product List',
                'description' => 'Select all columns from the products table.',
                'instructions' => 'Use SELECT * to retrieve all columns from products table.',
                'expected_sql' => 'SELECT * FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->get();',
                'expected_result' => 'Returns all product information including all columns.',
                'difficulty' => 'easy',
                'category' => 'basic_select',
                'points' => 5,
                'hint' => 'Use asterisk (*) to select all columns.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 2: Filtering with WHERE (Easy - 5 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Find Expensive Products',
                'description' => 'Find all products with price greater than $100.',
                'instructions' => 'Use WHERE clause to filter products based on price condition.',
                'expected_sql' => 'SELECT * FROM products WHERE price > 100;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'price\', \'>\', 100)->get();',
                'expected_result' => 'Returns all products with price greater than 100.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE clause with a comparison operator.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Find Apple Products',
                'description' => 'Find all products made by Apple.',
                'instructions' => 'Use WHERE clause to filter products by specific brand name.',
                'expected_sql' => 'SELECT * FROM products WHERE brand = \'Apple\';',
                'expected_laravel' => 'DB::table(\'products\')->where(\'brand\', \'Apple\')->get();',
                'expected_result' => 'Returns all products where brand equals Apple.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with exact string match for brand.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Low Stock Products',
                'description' => 'Find products with stock quantity less than 50.',
                'instructions' => 'Use WHERE clause to filter products by stock quantity condition.',
                'expected_sql' => 'SELECT * FROM products WHERE stock_quantity < 50;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'stock_quantity\', \'<\', 50)->get();',
                'expected_result' => 'Returns products with stock quantity less than 50.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with less than operator on stock_quantity.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Delivered Orders',
                'description' => 'Find all orders with status "delivered".',
                'instructions' => 'Use WHERE clause to filter orders by status.',
                'expected_sql' => 'SELECT * FROM orders WHERE status = \'delivered\';',
                'expected_laravel' => 'DB::table(\'orders\')->where(\'status\', \'delivered\')->get();',
                'expected_result' => 'Returns all orders with delivered status.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE to match exact status value.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Active Products Only',
                'description' => 'Find all products that are currently active.',
                'instructions' => 'Use WHERE clause to filter products by is_active status.',
                'expected_sql' => 'SELECT * FROM products WHERE is_active = TRUE;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'is_active\', true)->get();',
                'expected_result' => 'Returns all active products.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with boolean TRUE value.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Electronics Category Products',
                'description' => 'Find all products in category ID 1 (Electronics).',
                'instructions' => 'Use WHERE clause to filter products by category_id.',
                'expected_sql' => 'SELECT * FROM products WHERE category_id = 1;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'category_id\', 1)->get();',
                'expected_result' => 'Returns all products in electronics category.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE to match category_id = 1.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Recent Orders',
                'description' => 'Find orders placed after January 20, 2024.',
                'instructions' => 'Use WHERE clause to filter orders by date condition.',
                'expected_sql' => 'SELECT * FROM orders WHERE order_date > \'2024-01-20\';',
                'expected_laravel' => 'DB::table(\'orders\')->where(\'order_date\', \'>\', \'2024-01-20\')->get();',
                'expected_result' => 'Returns orders placed after January 20, 2024.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with date comparison.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'High Value Orders',
                'description' => 'Find orders with total amount greater than $500.',
                'instructions' => 'Use WHERE clause to filter orders by total_amount condition.',
                'expected_sql' => 'SELECT * FROM orders WHERE total_amount > 500;',
                'expected_laravel' => 'DB::table(\'orders\')->where(\'total_amount\', \'>\', 500)->get();',
                'expected_result' => 'Returns orders with total amount greater than $500.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE with greater than operator on total_amount.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Specific Customer Orders',
                'description' => 'Find all orders by customer "John Doe".',
                'instructions' => 'Use WHERE clause to filter orders by customer name.',
                'expected_sql' => 'SELECT * FROM orders WHERE customer_name = \'John Doe\';',
                'expected_laravel' => 'DB::table(\'orders\')->where(\'customer_name\', \'John Doe\')->get();',
                'expected_result' => 'Returns all orders placed by John Doe.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use WHERE to match exact customer name.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Mid-Range Products',
                'description' => 'Find products priced between $50 and $200.',
                'instructions' => 'Use WHERE clause with BETWEEN operator to filter products by price range.',
                'expected_sql' => 'SELECT * FROM products WHERE price BETWEEN 50 AND 200;',
                'expected_laravel' => 'DB::table(\'products\')->whereBetween(\'price\', [50, 200])->get();',
                'expected_result' => 'Returns products with price between $50 and $200.',
                'difficulty' => 'easy',
                'category' => 'basic_where',
                'points' => 5,
                'hint' => 'Use BETWEEN operator for range conditions.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 3: Sorting and Limiting (Easy - 5 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Sort Products by Price',
                'description' => 'Get all products ordered by price from highest to lowest.',
                'instructions' => 'Use ORDER BY clause to sort the results by price in descending order.',
                'expected_sql' => 'SELECT * FROM products ORDER BY price DESC;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'price\', \'desc\')->get();',
                'expected_result' => 'Returns all products sorted by price from highest to lowest.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY with DESC for descending order.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Alphabetical Product List',
                'description' => 'List all products sorted by name alphabetically.',
                'instructions' => 'Use ORDER BY clause to sort products by name in ascending order.',
                'expected_sql' => 'SELECT * FROM products ORDER BY name ASC;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'name\', \'asc\')->get();',
                'expected_result' => 'Returns products sorted alphabetically by name.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY with ASC for alphabetical order.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Most Recent Orders',
                'description' => 'Show orders sorted by order date, newest first.',
                'instructions' => 'Use ORDER BY clause to sort orders by order_date in descending order.',
                'expected_sql' => 'SELECT * FROM orders ORDER BY order_date DESC;',
                'expected_laravel' => 'DB::table(\'orders\')->orderBy(\'order_date\', \'desc\')->get();',
                'expected_result' => 'Returns orders sorted by date, newest first.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY order_date DESC for newest first.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Top 5 Expensive Products',
                'description' => 'Show the 5 most expensive products.',
                'instructions' => 'Use ORDER BY with LIMIT to get the top 5 products by price.',
                'expected_sql' => 'SELECT * FROM products ORDER BY price DESC LIMIT 5;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'price\', \'desc\')->limit(5)->get();',
                'expected_result' => 'Returns the 5 most expensive products.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY price DESC with LIMIT 5.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Lowest Stock First',
                'description' => 'List products sorted by stock quantity, lowest first.',
                'instructions' => 'Use ORDER BY clause to sort products by stock_quantity in ascending order.',
                'expected_sql' => 'SELECT * FROM products ORDER BY stock_quantity ASC;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'stock_quantity\', \'asc\')->get();',
                'expected_result' => 'Returns products sorted by stock quantity, lowest first.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY stock_quantity ASC.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'First 3 Categories',
                'description' => 'Show the first 3 categories by creation order.',
                'instructions' => 'Use ORDER BY with LIMIT to get the first 3 categories by ID.',
                'expected_sql' => 'SELECT * FROM categories ORDER BY id ASC LIMIT 3;',
                'expected_laravel' => 'DB::table(\'categories\')->orderBy(\'id\', \'asc\')->limit(3)->get();',
                'expected_result' => 'Returns the first 3 categories by creation order.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY id ASC with LIMIT 3.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Latest 5 Orders',
                'description' => 'Show the 5 most recent orders.',
                'instructions' => 'Use ORDER BY with LIMIT to get the 5 most recent orders.',
                'expected_sql' => 'SELECT * FROM orders ORDER BY order_date DESC LIMIT 5;',
                'expected_laravel' => 'DB::table(\'orders\')->orderBy(\'order_date\', \'desc\')->limit(5)->get();',
                'expected_result' => 'Returns the 5 most recent orders.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY order_date DESC with LIMIT 5.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Cheapest Products First',
                'description' => 'List all products sorted by price, cheapest first.',
                'instructions' => 'Use ORDER BY clause to sort products by price in ascending order.',
                'expected_sql' => 'SELECT * FROM products ORDER BY price ASC;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'price\', \'asc\')->get();',
                'expected_result' => 'Returns products sorted by price, cheapest first.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY price ASC for cheapest first.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Categories by Name',
                'description' => 'Show categories sorted alphabetically by name.',
                'instructions' => 'Use ORDER BY clause to sort categories by name in ascending order.',
                'expected_sql' => 'SELECT * FROM categories ORDER BY name ASC;',
                'expected_laravel' => 'DB::table(\'categories\')->orderBy(\'name\', \'asc\')->get();',
                'expected_result' => 'Returns categories sorted alphabetically by name.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY name ASC for alphabetical order.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Single Most Expensive Product',
                'description' => 'Show only the most expensive product.',
                'instructions' => 'Use ORDER BY with LIMIT 1 to get the single most expensive product.',
                'expected_sql' => 'SELECT * FROM products ORDER BY price DESC LIMIT 1;',
                'expected_laravel' => 'DB::table(\'products\')->orderBy(\'price\', \'desc\')->first();',
                'expected_result' => 'Returns the single most expensive product.',
                'difficulty' => 'easy',
                'category' => 'basic_order',
                'points' => 5,
                'hint' => 'Use ORDER BY price DESC with LIMIT 1.',
                'hint_penalty' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // INTERMEDIATE LEVEL QUESTIONS

        // Category 4: Aggregate Functions (Medium - 10 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Count Total Products',
                'description' => 'Count how many products are in the database.',
                'instructions' => 'Use COUNT aggregate function to count all rows in the products table.',
                'expected_sql' => 'SELECT COUNT(*) as total_products FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'COUNT(*) as total_products\')->get();',
                'expected_result' => 'Returns a single row with the total count of products.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use COUNT(*) to count all rows.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Average Product Price',
                'description' => 'Calculate the average price of all products.',
                'instructions' => 'Use AVG aggregate function to calculate the average price.',
                'expected_sql' => 'SELECT AVG(price) as avg_price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'AVG(price) as avg_price\')->get();',
                'expected_result' => 'Returns the average price of all products.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use AVG(price) to calculate average.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Total Order Value',
                'description' => 'Calculate the sum of all order amounts.',
                'instructions' => 'Use SUM aggregate function to calculate total of all order amounts.',
                'expected_sql' => 'SELECT SUM(total_amount) as total_sales FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->selectRaw(\'SUM(total_amount) as total_sales\')->get();',
                'expected_result' => 'Returns the sum of all order amounts.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use SUM(total_amount) to calculate total.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Most Expensive Product',
                'description' => 'Find the highest product price.',
                'instructions' => 'Use MAX aggregate function to find the highest price.',
                'expected_sql' => 'SELECT MAX(price) as max_price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'MAX(price) as max_price\')->get();',
                'expected_result' => 'Returns the highest product price.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use MAX(price) to find highest price.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Cheapest Product Price',
                'description' => 'Find the lowest product price.',
                'instructions' => 'Use MIN aggregate function to find the lowest price.',
                'expected_sql' => 'SELECT MIN(price) as min_price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'MIN(price) as min_price\')->get();',
                'expected_result' => 'Returns the lowest product price.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use MIN(price) to find lowest price.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Active Products Count',
                'description' => 'Count how many products are currently active.',
                'instructions' => 'Use COUNT with WHERE clause to count only active products.',
                'expected_sql' => 'SELECT COUNT(*) as active_products FROM products WHERE is_active = TRUE;',
                'expected_laravel' => 'DB::table(\'products\')->where(\'is_active\', true)->selectRaw(\'COUNT(*) as active_products\')->get();',
                'expected_result' => 'Returns count of active products.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use COUNT(*) with WHERE is_active = TRUE.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Total Stock Quantity',
                'description' => 'Calculate the total stock quantity across all products.',
                'instructions' => 'Use SUM aggregate function to calculate total stock.',
                'expected_sql' => 'SELECT SUM(stock_quantity) as total_stock FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'SUM(stock_quantity) as total_stock\')->get();',
                'expected_result' => 'Returns total stock quantity of all products.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use SUM(stock_quantity) to calculate total.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Average Order Value',
                'description' => 'Calculate the average order amount.',
                'instructions' => 'Use AVG aggregate function to calculate average order value.',
                'expected_sql' => 'SELECT AVG(total_amount) as avg_order_value FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->selectRaw(\'AVG(total_amount) as avg_order_value\')->get();',
                'expected_result' => 'Returns the average order amount.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use AVG(total_amount) to calculate average.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Delivered Orders Count',
                'description' => 'Count how many orders have been delivered.',
                'instructions' => 'Use COUNT with WHERE clause to count only delivered orders.',
                'expected_sql' => 'SELECT COUNT(*) as delivered_orders FROM orders WHERE status = \'delivered\';',
                'expected_laravel' => 'DB::table(\'orders\')->where(\'status\', \'delivered\')->selectRaw(\'COUNT(*) as delivered_orders\')->get();',
                'expected_result' => 'Returns count of delivered orders.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use COUNT(*) with WHERE status = "delivered".',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Price Range Analysis',
                'description' => 'Show the minimum, maximum, and average price in one query.',
                'instructions' => 'Use multiple aggregate functions in a single SELECT statement.',
                'expected_sql' => 'SELECT MIN(price) as min_price, MAX(price) as max_price, AVG(price) as avg_price FROM products;',
                'expected_laravel' => 'DB::table(\'products\')->selectRaw(\'MIN(price) as min_price, MAX(price) as max_price, AVG(price) as avg_price\')->get();',
                'expected_result' => 'Returns minimum, maximum, and average prices.',
                'difficulty' => 'medium',
                'category' => 'basic_aggregate',
                'points' => 10,
                'hint' => 'Use MIN, MAX, and AVG functions together.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 5: Grouping Data (Medium - 15 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Products per Category',
                'description' => 'Count how many products are in each category.',
                'instructions' => 'Use LEFT JOIN with GROUP BY and COUNT to show the number of products in each category, including categories with no products.',
                'expected_sql' => 'SELECT c.name, COUNT(p.id) as product_count FROM categories c LEFT JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->leftJoin(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'COUNT(p.id) as product_count\'))->groupBy(\'c.id\', \'c.name\')->get();',
                'expected_result' => 'Returns category names with the count of products in each category.',
                'difficulty' => 'medium',
                'category' => 'group_by',
                'points' => 15,
                'hint' => 'Use LEFT JOIN to include categories with zero products, then GROUP BY category.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Average Price by Category',
                'description' => 'Calculate the average price of products in each category.',
                'instructions' => 'Use JOIN with GROUP BY and AVG function to calculate average product price per category.',
                'expected_sql' => 'SELECT c.name, AVG(p.price) as avg_price FROM categories c JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'AVG(p.price) as avg_price\'))->groupBy(\'c.id\', \'c.name\')->get();',
                'expected_result' => 'Returns category names with their average product prices.',
                'difficulty' => 'medium',
                'category' => 'group_by_aggregate',
                'points' => 15,
                'hint' => 'Use AVG() function with GROUP BY to calculate average price per category.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Orders by Status',
                'description' => 'Count orders grouped by their status.',
                'instructions' => 'Use GROUP BY with COUNT to count orders for each status.',
                'expected_sql' => 'SELECT status, COUNT(*) as order_count FROM orders GROUP BY status;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'status\', DB::raw(\'COUNT(*) as order_count\'))->groupBy(\'status\')->get();',
                'expected_result' => 'Returns order status and count for each status.',
                'difficulty' => 'medium',
                'category' => 'group_by',
                'points' => 15,
                'hint' => 'Use GROUP BY status with COUNT(*).',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products by Brand',
                'description' => 'Count how many products each brand has.',
                'instructions' => 'Use GROUP BY with COUNT to count products for each brand.',
                'expected_sql' => 'SELECT brand, COUNT(*) as product_count FROM products GROUP BY brand;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'brand\', DB::raw(\'COUNT(*) as product_count\'))->groupBy(\'brand\')->get();',
                'expected_result' => 'Returns brand names and their product counts.',
                'difficulty' => 'medium',
                'category' => 'group_by',
                'points' => 15,
                'hint' => 'Use GROUP BY brand with COUNT(*).',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Total Sales by Status',
                'description' => 'Calculate total order value for each order status.',
                'instructions' => 'Use GROUP BY with SUM to calculate total sales for each status.',
                'expected_sql' => 'SELECT status, SUM(total_amount) as total_sales FROM orders GROUP BY status;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'status\', DB::raw(\'SUM(total_amount) as total_sales\'))->groupBy(\'status\')->get();',
                'expected_result' => 'Returns order status and total sales for each status.',
                'difficulty' => 'medium',
                'category' => 'group_by_aggregate',
                'points' => 15,
                'hint' => 'Use GROUP BY status with SUM(total_amount).',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Stock Analysis by Category',
                'description' => 'Show total stock quantity for each category.',
                'instructions' => 'Use JOIN with GROUP BY and SUM to calculate total stock per category.',
                'expected_sql' => 'SELECT c.name, SUM(p.stock_quantity) as total_stock FROM categories c JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'SUM(p.stock_quantity) as total_stock\'))->groupBy(\'c.id\', \'c.name\')->get();',
                'expected_result' => 'Returns category names and their total stock quantities.',
                'difficulty' => 'medium',
                'category' => 'group_by_aggregate',
                'points' => 15,
                'hint' => 'Use SUM(stock_quantity) with GROUP BY category.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'High-Value Categories',
                'description' => 'Find categories with average product price > $100.',
                'instructions' => 'Use GROUP BY with HAVING to filter categories by average price.',
                'expected_sql' => 'SELECT c.name, AVG(p.price) as avg_price FROM categories c JOIN products p ON c.id = p.category_id GROUP BY c.id, c.name HAVING AVG(p.price) > 100;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name\', DB::raw(\'AVG(p.price) as avg_price\'))->groupBy(\'c.id\', \'c.name\')->havingRaw(\'AVG(p.price) > 100\')->get();',
                'expected_result' => 'Returns categories with average price above $100.',
                'difficulty' => 'medium',
                'category' => 'group_by_having',
                'points' => 15,
                'hint' => 'Use HAVING clause to filter grouped results.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Brand Price Range',
                'description' => 'Show min and max price for each brand.',
                'instructions' => 'Use GROUP BY with MIN and MAX functions to show price range per brand.',
                'expected_sql' => 'SELECT brand, MIN(price) as min_price, MAX(price) as max_price FROM products GROUP BY brand;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'brand\', DB::raw(\'MIN(price) as min_price\'), DB::raw(\'MAX(price) as max_price\'))->groupBy(\'brand\')->get();',
                'expected_result' => 'Returns brand names with their min and max prices.',
                'difficulty' => 'medium',
                'category' => 'group_by_aggregate',
                'points' => 15,
                'hint' => 'Use MIN and MAX functions with GROUP BY brand.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Monthly Order Analysis',
                'description' => 'Count orders by month (assuming 2024-01).',
                'instructions' => 'Use DATE_FORMAT with GROUP BY to count orders by month.',
                'expected_sql' => 'SELECT DATE_FORMAT(order_date, \'%Y-%m\') as month, COUNT(*) as order_count FROM orders GROUP BY DATE_FORMAT(order_date, \'%Y-%m\');',
                'expected_laravel' => 'DB::table(\'orders\')->select(DB::raw(\'DATE_FORMAT(order_date, "%Y-%m") as month\'), DB::raw(\'COUNT(*) as order_count\'))->groupBy(DB::raw(\'DATE_FORMAT(order_date, "%Y-%m")\'))->get();',
                'expected_result' => 'Returns month and order count for each month.',
                'difficulty' => 'medium',
                'category' => 'group_by',
                'points' => 15,
                'hint' => 'Use DATE_FORMAT to extract month from date.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Popular Brands',
                'description' => 'Find brands with more than 1 product.',
                'instructions' => 'Use GROUP BY with HAVING to filter brands by product count.',
                'expected_sql' => 'SELECT brand, COUNT(*) as product_count FROM products GROUP BY brand HAVING COUNT(*) > 1;',
                'expected_laravel' => 'DB::table(\'products\')->select(\'brand\', DB::raw(\'COUNT(*) as product_count\'))->groupBy(\'brand\')->havingRaw(\'COUNT(*) > 1\')->get();',
                'expected_result' => 'Returns brands with more than 1 product.',
                'difficulty' => 'medium',
                'category' => 'group_by_having',
                'points' => 15,
                'hint' => 'Use HAVING COUNT(*) > 1 to filter grouped results.',
                'hint_penalty' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 6: Basic Joins (Medium - 10 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Products with Categories',
                'description' => 'List all products with their category names.',
                'instructions' => 'Use JOIN to combine products and categories tables to show product and category names together.',
                'expected_sql' => 'SELECT p.name as product_name, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.id;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->select(\'p.name as product_name\', \'c.name as category_name\')->get();',
                'expected_result' => 'Returns product names paired with their corresponding category names.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'Use JOIN with ON clause to connect products.category_id = categories.id.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Order Items with Product Names',
                'description' => 'Show order items with their product names.',
                'instructions' => 'Use JOIN to combine order_items and products tables.',
                'expected_sql' => 'SELECT oi.order_id, p.name as product_name, oi.quantity FROM order_items oi JOIN products p ON oi.product_id = p.id;',
                'expected_laravel' => 'DB::table(\'order_items as oi\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->select(\'oi.order_id\', \'p.name as product_name\', \'oi.quantity\')->get();',
                'expected_result' => 'Returns order items with product names and quantities.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN order_items with products on product_id.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Orders with Customer Info',
                'description' => 'Show order ID, customer name, and total amount for all orders.',
                'instructions' => 'Select specific columns from the orders table to display order information.',
                'expected_sql' => 'SELECT id, customer_name, total_amount FROM orders;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'id\', \'customer_name\', \'total_amount\')->get();',
                'expected_result' => 'Returns order IDs, customer names, and total amounts for all orders.',
                'difficulty' => 'medium',
                'category' => 'basic_join',
                'points' => 10,
                'hint' => 'Select the id, customer_name, and total_amount columns from orders table.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Apple Products with Categories',
                'description' => 'Show Apple products with their category names.',
                'instructions' => 'Use JOIN with WHERE clause to filter for Apple products.',
                'expected_sql' => 'SELECT p.name as product_name, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.id WHERE p.brand = \'Apple\';',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->where(\'p.brand\', \'Apple\')->select(\'p.name as product_name\', \'c.name as category_name\')->get();',
                'expected_result' => 'Returns Apple products with their category names.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN products with categories, then filter WHERE brand = "Apple".',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'High-Value Order Items',
                'description' => 'Show order items over $100 with product names.',
                'instructions' => 'Use JOIN with WHERE clause to filter high-value order items.',
                'expected_sql' => 'SELECT oi.order_id, p.name as product_name, oi.total_price FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.total_price > 100;',
                'expected_laravel' => 'DB::table(\'order_items as oi\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->where(\'oi.total_price\', \'>\', 100)->select(\'oi.order_id\', \'p.name as product_name\', \'oi.total_price\')->get();',
                'expected_result' => 'Returns order items over $100 with product names.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN order_items with products, filter WHERE total_price > 100.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Electronics Products Details',
                'description' => 'Show all electronics products with full details.',
                'instructions' => 'Use JOIN with WHERE clause to filter for Electronics category.',
                'expected_sql' => 'SELECT p.name, p.price, p.brand, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.id WHERE c.name = \'Electronics\';',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->where(\'c.name\', \'Electronics\')->select(\'p.name\', \'p.price\', \'p.brand\', \'c.name as category_name\')->get();',
                'expected_result' => 'Returns electronics products with details.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN products with categories, filter WHERE category.name = "Electronics".',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Subcategory Products',
                'description' => 'Show products from subcategories (categories with parent_id).',
                'instructions' => 'Use JOIN with WHERE clause to filter for subcategories.',
                'expected_sql' => 'SELECT p.name as product_name, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.id WHERE c.parent_id IS NOT NULL;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->whereNotNull(\'c.parent_id\')->select(\'p.name as product_name\', \'c.name as category_name\')->get();',
                'expected_result' => 'Returns products from subcategories only.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'Filter WHERE parent_id IS NOT NULL to find subcategories.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Order Details with Dates',
                'description' => 'Show order items with order dates.',
                'instructions' => 'Use JOIN to combine order_items and orders tables.',
                'expected_sql' => 'SELECT oi.order_id, o.order_date, oi.quantity, oi.total_price FROM order_items oi JOIN orders o ON oi.order_id = o.id;',
                'expected_laravel' => 'DB::table(\'order_items as oi\')->join(\'orders as o\', \'oi.order_id\', \'=\', \'o.id\')->select(\'oi.order_id\', \'o.order_date\', \'oi.quantity\', \'oi.total_price\')->get();',
                'expected_result' => 'Returns order items with their order dates.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN order_items with orders on order_id.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Recent Product Orders',
                'description' => 'Show products ordered after January 20, 2024.',
                'instructions' => 'Use multiple JOINs with WHERE clause to filter by date.',
                'expected_sql' => 'SELECT DISTINCT p.name FROM products p JOIN order_items oi ON p.id = oi.product_id JOIN orders o ON oi.order_id = o.id WHERE o.order_date > \'2024-01-20\';',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->join(\'orders as o\', \'oi.order_id\', \'=\', \'o.id\')->where(\'o.order_date\', \'>\', \'2024-01-20\')->distinct()->select(\'p.name\')->get();',
                'expected_result' => 'Returns distinct products ordered after January 20, 2024.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'Chain JOINs: products → order_items → orders, then filter by date.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Product Summary',
                'description' => 'Show category name, product name, and price for all products.',
                'instructions' => 'Use JOIN with ORDER BY to show organized product information.',
                'expected_sql' => 'SELECT c.name as category_name, p.name as product_name, p.price FROM categories c JOIN products p ON c.id = p.category_id ORDER BY c.name, p.name;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->select(\'c.name as category_name\', \'p.name as product_name\', \'p.price\')->orderBy(\'c.name\')->orderBy(\'p.name\')->get();',
                'expected_result' => 'Returns organized product summary by category.',
                'difficulty' => 'medium',
                'category' => 'joins',
                'points' => 10,
                'hint' => 'JOIN categories with products, ORDER BY category and product names.',
                'hint_penalty' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // ADVANCED LEVEL QUESTIONS

        // Category 7: Complex Joins (Hard - 20 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Complete Order Details',
                'description' => 'Show order ID, customer name, product name, quantity, and total for each order item.',
                'instructions' => 'Use multiple JOINs to connect orders, order_items, and products tables to show complete order details.',
                'expected_sql' => 'SELECT o.id as order_id, o.customer_name, p.name as product_name, oi.quantity, oi.total_price FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->select(\'o.id as order_id\', \'o.customer_name\', \'p.name as product_name\', \'oi.quantity\', \'oi.total_price\')->get();',
                'expected_result' => 'Returns detailed order information with customer names, product names, quantities, and prices for each order item.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Chain multiple JOINs: orders → order_items → products.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Hierarchy with Products',
                'description' => 'Show parent category, subcategory, and products in subcategories.',
                'instructions' => 'Use self-JOIN on categories with products JOIN to show hierarchy.',
                'expected_sql' => 'SELECT parent.name as parent_category, child.name as subcategory, p.name as product_name FROM categories parent JOIN categories child ON parent.id = child.parent_id JOIN products p ON child.id = p.category_id;',
                'expected_laravel' => 'DB::table(\'categories as parent\')->join(\'categories as child\', \'parent.id\', \'=\', \'child.parent_id\')->join(\'products as p\', \'child.id\', \'=\', \'p.category_id\')->select(\'parent.name as parent_category\', \'child.name as subcategory\', \'p.name as product_name\')->get();',
                'expected_result' => 'Returns parent category, subcategory, and product hierarchy.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Use self-JOIN on categories table with products.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Orders Without Items',
                'description' => 'Find orders that have no order items (using LEFT JOIN).',
                'instructions' => 'Use LEFT JOIN with WHERE IS NULL to find orders without items.',
                'expected_sql' => 'SELECT o.id, o.customer_name FROM orders o LEFT JOIN order_items oi ON o.id = oi.order_id WHERE oi.order_id IS NULL;',
                'expected_laravel' => 'DB::table(\'orders as o\')->leftJoin(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->whereNull(\'oi.order_id\')->select(\'o.id\', \'o.customer_name\')->get();',
                'expected_result' => 'Returns orders that have no associated order items.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Use LEFT JOIN with WHERE IS NULL to find missing relationships.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products Never Ordered',
                'description' => 'Find products that have never been ordered.',
                'instructions' => 'Use LEFT JOIN with WHERE IS NULL to find products that do not appear in any orders.',
                'expected_sql' => 'SELECT p.* FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id WHERE oi.product_id IS NULL;',
                'expected_laravel' => 'DB::table(\'products as p\')->leftJoin(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->whereNull(\'oi.product_id\')->select(\'p.*\')->get();',
                'expected_result' => 'Returns all products that have never been included in any order.',
                'difficulty' => 'hard',
                'category' => 'advanced_joins',
                'points' => 20,
                'hint' => 'Use LEFT JOIN to include all products, then filter WHERE order_items.product_id IS NULL.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customer Order History',
                'description' => 'Show complete customer order history with product details.',
                'instructions' => 'Use multiple JOINs to show comprehensive customer order information.',
                'expected_sql' => 'SELECT o.customer_name, o.order_date, p.name as product_name, oi.quantity, oi.total_price, c.name as category_name FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id JOIN categories c ON p.category_id = c.id ORDER BY o.customer_name, o.order_date;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->select(\'o.customer_name\', \'o.order_date\', \'p.name as product_name\', \'oi.quantity\', \'oi.total_price\', \'c.name as category_name\')->orderBy(\'o.customer_name\')->orderBy(\'o.order_date\')->get();',
                'expected_result' => 'Returns complete customer order history with product and category details.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Chain JOINs through all related tables: orders → order_items → products → categories.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Brand Performance Analysis',
                'description' => 'Show brand, total products, total orders, and total revenue.',
                'instructions' => 'Use LEFT JOIN with GROUP BY to analyze brand performance.',
                'expected_sql' => 'SELECT p.brand, COUNT(DISTINCT p.id) as total_products, COUNT(DISTINCT oi.order_id) as total_orders, SUM(oi.total_price) as total_revenue FROM products p LEFT JOIN order_items oi ON p.id = oi.product_id GROUP BY p.brand;',
                'expected_laravel' => 'DB::table(\'products as p\')->leftJoin(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->select(\'p.brand\', DB::raw(\'COUNT(DISTINCT p.id) as total_products\'), DB::raw(\'COUNT(DISTINCT oi.order_id) as total_orders\'), DB::raw(\'SUM(oi.total_price) as total_revenue\'))->groupBy(\'p.brand\')->get();',
                'expected_result' => 'Returns brand performance metrics including products, orders, and revenue.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Use LEFT JOIN with GROUP BY and multiple aggregate functions.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Categories with No Products',
                'description' => 'Find categories that have no products assigned.',
                'instructions' => 'Use LEFT JOIN with WHERE IS NULL to find empty categories.',
                'expected_sql' => 'SELECT c.name FROM categories c LEFT JOIN products p ON c.id = p.category_id WHERE p.category_id IS NULL;',
                'expected_laravel' => 'DB::table(\'categories as c\')->leftJoin(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->whereNull(\'p.category_id\')->select(\'c.name\')->get();',
                'expected_result' => 'Returns categories that have no products assigned.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Use LEFT JOIN to include all categories, filter WHERE products.category_id IS NULL.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Full Order Breakdown',
                'description' => 'Show order, customer, product, category, and brand information.',
                'instructions' => 'Use multiple JOINs to create comprehensive order breakdown.',
                'expected_sql' => 'SELECT o.id as order_id, o.customer_name, o.order_date, p.name as product_name, p.brand, c.name as category_name, oi.quantity, oi.total_price FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id JOIN categories c ON p.category_id = c.id;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->select(\'o.id as order_id\', \'o.customer_name\', \'o.order_date\', \'p.name as product_name\', \'p.brand\', \'c.name as category_name\', \'oi.quantity\', \'oi.total_price\')->get();',
                'expected_result' => 'Returns complete order breakdown with all related information.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Chain all table JOINs to get comprehensive order details.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Cross-Category Analysis',
                'description' => 'Show customers who bought from multiple categories.',
                'instructions' => 'Use multiple JOINs with GROUP BY and HAVING to find cross-category customers.',
                'expected_sql' => 'SELECT o.customer_name, COUNT(DISTINCT c.id) as categories_purchased_from FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id JOIN categories c ON p.category_id = c.id GROUP BY o.customer_name HAVING COUNT(DISTINCT c.id) > 1;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->join(\'categories as c\', \'p.category_id\', \'=\', \'c.id\')->select(\'o.customer_name\', DB::raw(\'COUNT(DISTINCT c.id) as categories_purchased_from\'))->groupBy(\'o.customer_name\')->havingRaw(\'COUNT(DISTINCT c.id) > 1\')->get();',
                'expected_result' => 'Returns customers who bought from multiple categories.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'Use DISTINCT COUNT with HAVING to find multi-category customers.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Inactive Products in Orders',
                'description' => 'Find orders containing products that are now inactive.',
                'instructions' => 'Use JOINs with WHERE clause to find orders with inactive products.',
                'expected_sql' => 'SELECT o.id as order_id, o.customer_name, p.name as product_name FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id WHERE p.is_active = FALSE;',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->join(\'products as p\', \'oi.product_id\', \'=\', \'p.id\')->where(\'p.is_active\', false)->select(\'o.id as order_id\', \'o.customer_name\', \'p.name as product_name\')->get();',
                'expected_result' => 'Returns orders that contain products now marked as inactive.',
                'difficulty' => 'hard',
                'category' => 'complex_joins',
                'points' => 20,
                'hint' => 'JOIN through order tables, filter WHERE is_active = FALSE.',
                'hint_penalty' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 8: Subqueries (Hard - 25 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Products Above Average Price',
                'description' => 'Find products that cost more than the average product price.',
                'instructions' => 'Use a subquery to calculate the average price and filter products above that average.',
                'expected_sql' => 'SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);',
                'expected_laravel' => 'DB::table(\'products\')->where(\'price\', \'>\', function($query) { $query->selectRaw(\'AVG(price)\')->from(\'products\'); })->get();',
                'expected_result' => 'Returns all products with prices higher than the average product price.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use a subquery with AVG() function in the WHERE clause.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customers with High-Value Orders',
                'description' => 'Find customers whose average order value is above $500.',
                'instructions' => 'Use GROUP BY with HAVING and AVG to find high-value customers.',
                'expected_sql' => 'SELECT customer_name FROM orders GROUP BY customer_name HAVING AVG(total_amount) > 500;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'customer_name\')->groupBy(\'customer_name\')->havingRaw(\'AVG(total_amount) > 500\')->get();',
                'expected_result' => 'Returns customers with average order value above $500.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use HAVING with AVG to filter grouped results.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Most Expensive Product per Category',
                'description' => 'Find the most expensive product in each category.',
                'instructions' => 'Use correlated subquery to find products with maximum price per category.',
                'expected_sql' => 'SELECT p1.* FROM products p1 WHERE p1.price = (SELECT MAX(p2.price) FROM products p2 WHERE p2.category_id = p1.category_id);',
                'expected_laravel' => 'DB::table(\'products as p1\')->whereRaw(\'price = (SELECT MAX(price) FROM products p2 WHERE p2.category_id = p1.category_id)\')->get();',
                'expected_result' => 'Returns the most expensive product from each category.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use correlated subquery with MAX function.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products in Popular Categories',
                'description' => 'Find products in categories that have more than 2 products.',
                'instructions' => 'Use subquery with IN clause to find products in popular categories.',
                'expected_sql' => 'SELECT * FROM products WHERE category_id IN (SELECT category_id FROM products GROUP BY category_id HAVING COUNT(*) > 2);',
                'expected_laravel' => 'DB::table(\'products\')->whereIn(\'category_id\', function($query) { $query->select(\'category_id\')->from(\'products\')->groupBy(\'category_id\')->havingRaw(\'COUNT(*) > 2\'); })->get();',
                'expected_result' => 'Returns products from categories with more than 2 products.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use IN with subquery that groups and filters by count.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Orders with Above-Average Items',
                'description' => 'Find orders that contain items with above-average unit price.',
                'instructions' => 'Use subquery to find orders with items above average unit price.',
                'expected_sql' => 'SELECT DISTINCT o.* FROM orders o JOIN order_items oi ON o.id = oi.order_id WHERE oi.unit_price > (SELECT AVG(unit_price) FROM order_items);',
                'expected_laravel' => 'DB::table(\'orders as o\')->join(\'order_items as oi\', \'o.id\', \'=\', \'oi.order_id\')->whereRaw(\'oi.unit_price > (SELECT AVG(unit_price) FROM order_items)\')->distinct()->get();',
                'expected_result' => 'Returns orders containing items with above-average unit price.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'JOIN with subquery in WHERE clause using AVG.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Categories with Low Stock Products',
                'description' => 'Find categories that have products with stock below average.',
                'instructions' => 'Use subquery to find categories with below-average stock products.',
                'expected_sql' => 'SELECT DISTINCT c.* FROM categories c JOIN products p ON c.id = p.category_id WHERE p.stock_quantity < (SELECT AVG(stock_quantity) FROM products);',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->whereRaw(\'p.stock_quantity < (SELECT AVG(stock_quantity) FROM products)\')->distinct()->get();',
                'expected_result' => 'Returns categories having products with below-average stock.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'JOIN categories with products, use subquery for stock comparison.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Best Selling Product Details',
                'description' => 'Find details of the product that appears in the most order items.',
                'instructions' => 'Use subquery to find the most frequently ordered product.',
                'expected_sql' => 'SELECT p.* FROM products p WHERE p.id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1);',
                'expected_laravel' => 'DB::table(\'products as p\')->whereRaw(\'id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)\')->get();',
                'expected_result' => 'Returns details of the most frequently ordered product.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use subquery with GROUP BY and ORDER BY COUNT DESC.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customers Who Bought Expensive Items',
                'description' => 'Find customers who bought items costing more than $1000.',
                'instructions' => 'Use subquery with IN to find customers with high-value purchases.',
                'expected_sql' => 'SELECT DISTINCT customer_name FROM orders WHERE id IN (SELECT order_id FROM order_items WHERE total_price > 1000);',
                'expected_laravel' => 'DB::table(\'orders\')->whereIn(\'id\', function($query) { $query->select(\'order_id\')->from(\'order_items\')->where(\'total_price\', \'>\', 1000); })->distinct()->select(\'customer_name\')->get();',
                'expected_result' => 'Returns customers who bought items over $1000.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use IN with subquery filtering by total_price.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Products More Expensive Than Category Average',
                'description' => 'Find products that cost more than their category average.',
                'instructions' => 'Use correlated subquery to compare product price with category average.',
                'expected_sql' => 'SELECT p1.* FROM products p1 WHERE p1.price > (SELECT AVG(p2.price) FROM products p2 WHERE p2.category_id = p1.category_id);',
                'expected_laravel' => 'DB::table(\'products as p1\')->whereRaw(\'price > (SELECT AVG(price) FROM products p2 WHERE p2.category_id = p1.category_id)\')->get();',
                'expected_result' => 'Returns products more expensive than their category average.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use correlated subquery comparing price with category AVG.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Inactive Brands with Products',
                'description' => 'Find brands that have all their products marked as inactive.',
                'instructions' => 'Use NOT EXISTS subquery to find brands with no active products.',
                'expected_sql' => 'SELECT DISTINCT brand FROM products p1 WHERE NOT EXISTS (SELECT 1 FROM products p2 WHERE p2.brand = p1.brand AND p2.is_active = TRUE);',
                'expected_laravel' => 'DB::table(\'products as p1\')->whereRaw(\'NOT EXISTS (SELECT 1 FROM products p2 WHERE p2.brand = p1.brand AND p2.is_active = TRUE)\')->distinct()->select(\'brand\')->get();',
                'expected_result' => 'Returns brands that have no active products.',
                'difficulty' => 'hard',
                'category' => 'subquery',
                'points' => 25,
                'hint' => 'Use NOT EXISTS to find brands without active products.',
                'hint_penalty' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);

        // Category 9: Advanced Analytics (Hard - 30 points each)
        DB::table('questions')->insert([
            [
                'title' => 'Top Selling Products',
                'description' => 'Find the top 3 products by total quantity sold.',
                'instructions' => 'Use JOIN, GROUP BY, SUM, ORDER BY, and LIMIT to find the products with highest total sales quantity.',
                'expected_sql' => 'SELECT p.name, SUM(oi.quantity) as total_sold FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id, p.name ORDER BY total_sold DESC LIMIT 3;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->select(\'p.name\', DB::raw(\'SUM(oi.quantity) as total_sold\'))->groupBy(\'p.id\', \'p.name\')->orderBy(\'total_sold\', \'desc\')->limit(3)->get();',
                'expected_result' => 'Returns the top 3 products by total quantity sold, showing product names and total quantities.',
                'difficulty' => 'hard',
                'category' => 'complex_aggregate',
                'points' => 30,
                'hint' => 'Use SUM(quantity), GROUP BY product, ORDER BY total DESC, and LIMIT 3.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Revenue Analysis',
                'description' => 'Calculate total revenue for each category from completed orders.',
                'instructions' => 'Use multiple JOINs with WHERE clause to filter only delivered orders, then GROUP BY category to calculate total revenue.',
                'expected_sql' => 'SELECT c.name as category, SUM(oi.total_price) as revenue FROM categories c JOIN products p ON c.id = p.category_id JOIN order_items oi ON p.id = oi.product_id JOIN orders o ON oi.order_id = o.id WHERE o.status = \'delivered\' GROUP BY c.id, c.name ORDER BY revenue DESC;',
                'expected_laravel' => 'DB::table(\'categories as c\')->join(\'products as p\', \'c.id\', \'=\', \'p.category_id\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->join(\'orders as o\', \'oi.order_id\', \'=\', \'o.id\')->where(\'o.status\', \'delivered\')->select(\'c.name as category\', DB::raw(\'SUM(oi.total_price) as revenue\'))->groupBy(\'c.id\', \'c.name\')->orderBy(\'revenue\', \'desc\')->get();',
                'expected_result' => 'Returns total revenue per category for delivered orders only, sorted by revenue in descending order.',
                'difficulty' => 'hard',
                'category' => 'complex_joins_aggregate',
                'points' => 30,
                'hint' => 'Chain JOINs through all tables, filter by order status, then GROUP BY category.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customer Order Statistics',
                'description' => 'For each customer, show total orders, total spent, and average order value.',
                'instructions' => 'Use GROUP BY with multiple aggregate functions (COUNT, SUM, AVG) to calculate customer statistics.',
                'expected_sql' => 'SELECT customer_name, customer_email, COUNT(*) as total_orders, SUM(total_amount) as total_spent, AVG(total_amount) as avg_order_value FROM orders GROUP BY customer_name, customer_email ORDER BY total_spent DESC;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'customer_name\', \'customer_email\', DB::raw(\'COUNT(*) as total_orders\'), DB::raw(\'SUM(total_amount) as total_spent\'), DB::raw(\'AVG(total_amount) as avg_order_value\'))->groupBy(\'customer_name\', \'customer_email\')->orderBy(\'total_spent\', \'desc\')->get();',
                'expected_result' => 'Returns customer statistics including total orders, total amount spent, and average order value, sorted by total spent.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use COUNT(*), SUM(total_amount), and AVG(total_amount) with GROUP BY customer.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Monthly Sales Trend',
                'description' => 'Show total sales amount for each month in 2024.',
                'instructions' => 'Use DATE_FORMAT with GROUP BY to analyze monthly sales trends.',
                'expected_sql' => 'SELECT DATE_FORMAT(order_date, \'%Y-%m\') as month, SUM(total_amount) as monthly_sales FROM orders WHERE YEAR(order_date) = 2024 GROUP BY DATE_FORMAT(order_date, \'%Y-%m\') ORDER BY month;',
                'expected_laravel' => 'DB::table(\'orders\')->whereYear(\'order_date\', 2024)->select(DB::raw(\'DATE_FORMAT(order_date, "%Y-%m") as month\'), DB::raw(\'SUM(total_amount) as monthly_sales\'))->groupBy(DB::raw(\'DATE_FORMAT(order_date, "%Y-%m")\'))->orderBy(\'month\')->get();',
                'expected_result' => 'Returns monthly sales totals for 2024.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use DATE_FORMAT and YEAR functions with GROUP BY.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Product Performance Matrix',
                'description' => 'Show product name, total sold, total revenue, and average order quantity.',
                'instructions' => 'Use JOIN with multiple aggregate functions to analyze product performance.',
                'expected_sql' => 'SELECT p.name, SUM(oi.quantity) as total_sold, SUM(oi.total_price) as total_revenue, AVG(oi.quantity) as avg_order_qty FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id, p.name ORDER BY total_revenue DESC;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->select(\'p.name\', DB::raw(\'SUM(oi.quantity) as total_sold\'), DB::raw(\'SUM(oi.total_price) as total_revenue\'), DB::raw(\'AVG(oi.quantity) as avg_order_qty\'))->groupBy(\'p.id\', \'p.name\')->orderBy(\'total_revenue\', \'desc\')->get();',
                'expected_result' => 'Returns comprehensive product performance metrics.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use multiple aggregate functions: SUM, AVG with GROUP BY product.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Customer Lifetime Value',
                'description' => 'Calculate total lifetime value for each customer with order count.',
                'instructions' => 'Use GROUP BY with multiple aggregates to analyze customer value.',
                'expected_sql' => 'SELECT customer_name, COUNT(*) as order_count, SUM(total_amount) as lifetime_value, AVG(total_amount) as avg_order, MAX(order_date) as last_order FROM orders GROUP BY customer_name ORDER BY lifetime_value DESC;',
                'expected_laravel' => 'DB::table(\'orders\')->select(\'customer_name\', DB::raw(\'COUNT(*) as order_count\'), DB::raw(\'SUM(total_amount) as lifetime_value\'), DB::raw(\'AVG(total_amount) as avg_order\'), DB::raw(\'MAX(order_date) as last_order\'))->groupBy(\'customer_name\')->orderBy(\'lifetime_value\', \'desc\')->get();',
                'expected_result' => 'Returns customer lifetime value analysis.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use COUNT, SUM, AVG, MAX functions together.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Brand Market Share',
                'description' => 'Calculate each brand\'s share of total product revenue.',
                'instructions' => 'Use subquery to calculate market share percentages.',
                'expected_sql' => 'SELECT p.brand, SUM(oi.total_price) as brand_revenue, (SUM(oi.total_price) / (SELECT SUM(total_price) FROM order_items) * 100) as market_share_percent FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.brand ORDER BY market_share_percent DESC;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->select(\'p.brand\', DB::raw(\'SUM(oi.total_price) as brand_revenue\'), DB::raw(\'(SUM(oi.total_price) / (SELECT SUM(total_price) FROM order_items) * 100) as market_share_percent\'))->groupBy(\'p.brand\')->orderBy(\'market_share_percent\', \'desc\')->get();',
                'expected_result' => 'Returns brand market share analysis with percentages.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use subquery in SELECT to calculate percentage share.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Category Cross-Sell Analysis',
                'description' => 'Find which categories are frequently bought together.',
                'instructions' => 'Use self-JOIN on order_items to find category combinations.',
                'expected_sql' => 'SELECT c1.name as category1, c2.name as category2, COUNT(*) as times_bought_together FROM categories c1 JOIN products p1 ON c1.id = p1.category_id JOIN order_items oi1 ON p1.id = oi1.product_id JOIN order_items oi2 ON oi1.order_id = oi2.order_id JOIN products p2 ON oi2.product_id = p2.id JOIN categories c2 ON p2.category_id = c2.id WHERE c1.id < c2.id GROUP BY c1.id, c1.name, c2.id, c2.name ORDER BY times_bought_together DESC;',
                'expected_laravel' => 'DB::table(\'categories as c1\')->join(\'products as p1\', \'c1.id\', \'=\', \'p1.category_id\')->join(\'order_items as oi1\', \'p1.id\', \'=\', \'oi1.product_id\')->join(\'order_items as oi2\', \'oi1.order_id\', \'=\', \'oi2.order_id\')->join(\'products as p2\', \'oi2.product_id\', \'=\', \'p2.id\')->join(\'categories as c2\', \'p2.category_id\', \'=\', \'c2.id\')->whereRaw(\'c1.id < c2.id\')->select(\'c1.name as category1\', \'c2.name as category2\', DB::raw(\'COUNT(*) as times_bought_together\'))->groupBy(\'c1.id\', \'c1.name\', \'c2.id\', \'c2.name\')->orderBy(\'times_bought_together\', \'desc\')->get();',
                'expected_result' => 'Returns category pairs frequently bought together.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use self-JOIN on order_items to find category combinations.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Seasonal Product Analysis',
                'description' => 'Analyze product sales by order date ranges.',
                'instructions' => 'Use date filtering with aggregate analysis.',
                'expected_sql' => 'SELECT p.name, COUNT(oi.id) as order_frequency, SUM(oi.quantity) as total_quantity, AVG(oi.unit_price) as avg_selling_price FROM products p JOIN order_items oi ON p.id = oi.product_id JOIN orders o ON oi.order_id = o.id WHERE o.order_date BETWEEN \'2024-01-15\' AND \'2024-01-25\' GROUP BY p.id, p.name ORDER BY total_quantity DESC;',
                'expected_laravel' => 'DB::table(\'products as p\')->join(\'order_items as oi\', \'p.id\', \'=\', \'oi.product_id\')->join(\'orders as o\', \'oi.order_id\', \'=\', \'o.id\')->whereBetween(\'o.order_date\', [\'2024-01-15\', \'2024-01-25\'])->select(\'p.name\', DB::raw(\'COUNT(oi.id) as order_frequency\'), DB::raw(\'SUM(oi.quantity) as total_quantity\'), DB::raw(\'AVG(oi.unit_price) as avg_selling_price\'))->groupBy(\'p.id\', \'p.name\')->orderBy(\'total_quantity\', \'desc\')->get();',
                'expected_result' => 'Returns product performance analysis for specific date range.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use BETWEEN for date filtering with multiple aggregates.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'title' => 'Complete Business Intelligence Dashboard',
                'description' => 'Create a comprehensive business summary with key metrics.',
                'instructions' => 'Use CROSS JOIN with multiple aggregates to create dashboard summary.',
                'expected_sql' => 'SELECT \'Business Summary\' as metric_type, COUNT(DISTINCT o.id) as total_orders, COUNT(DISTINCT o.customer_email) as unique_customers, COUNT(DISTINCT p.id) as total_products, SUM(o.total_amount) as total_revenue, AVG(o.total_amount) as avg_order_value FROM orders o CROSS JOIN products p CROSS JOIN categories c;',
                'expected_laravel' => 'DB::table(\'orders as o\')->crossJoin(\'products as p\')->crossJoin(\'categories as c\')->select(DB::raw(\'"Business Summary" as metric_type\'), DB::raw(\'COUNT(DISTINCT o.id) as total_orders\'), DB::raw(\'COUNT(DISTINCT o.customer_email) as unique_customers\'), DB::raw(\'COUNT(DISTINCT p.id) as total_products\'), DB::raw(\'SUM(o.total_amount) as total_revenue\'), DB::raw(\'AVG(o.total_amount) as avg_order_value\'))->first();',
                'expected_result' => 'Returns comprehensive business metrics dashboard.',
                'difficulty' => 'hard',
                'category' => 'advanced_aggregate',
                'points' => 30,
                'hint' => 'Use CROSS JOIN with DISTINCT COUNT for business metrics.',
                'hint_penalty' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}